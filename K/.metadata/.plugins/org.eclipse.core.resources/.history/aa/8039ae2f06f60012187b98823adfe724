package teo.isgci.yfiles;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collection;
import java.util.Iterator;

import javax.swing.AbstractAction;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

import teo.isgci.core.App;
import teo.isgci.core.NodeView;
import teo.isgci.data.db.Algo;
import teo.isgci.data.gc.GraphClass;
import teo.isgci.view.gui.GraphClassInformationDialog;
import teo.isgci.view.gui.ISGCIMainFrame;
import y.base.Edge;
import y.base.EdgeCursor;
import y.base.EdgeList;
import y.base.Node;
import y.view.Graph2D;
import y.view.NodeLabel;
import y.view.NodeRealizer;
import y.view.PopupMode;

/**
 * The node pop-up menu.
 * 
 * @author Calum *
 */
public class HierarchicPopupMode extends PopupMode implements ActionListener {
	
	/** The 'add super-classes' menu item. */
	private JMenuItem  addUp;
	/** The 'add sub-classes' menu item. */
	private JMenuItem  addDown;
	/** The 'delete' menu item. */
	private JMenuItem  delItem;
	/** The 'info' menu item. */
	private JMenuItem  infoItem;
	/** The 'select neighbours' menu item. */
	private JMenuItem  selectItem;
	/** The 'select super-classes' menu item. */
	private JMenuItem  selectItemUp;
	/** The 'select sub-classes' menu item. */
	private JMenuItem  selectItemDown;
	
	/** The menu. */
	private JMenu  namingMenu;
	
	/** The parent frame. */
    private ISGCIMainFrame parent;
    
    /** The yfiles drawing service. */
	private final YFilesDrawingService drawingService;
    
	/**
	 * Creates a new instance.
	 * @param parent			The parent frame.
	 * @param drawingService	The yfiles drawing service.
	 */
    public HierarchicPopupMode(ISGCIMainFrame parent, YFilesDrawingService drawingService) {
    	super();
    	this.drawingService = drawingService;
    	this.parent = parent;
    }
    
    /**
     * Gets the node pop-up menu.
     */
    public JPopupMenu getNodePopup(Node v) {
      Graph2D graph = getGraph2D();
      JPopupMenu pm = new JPopupMenu();
      populatePopup(pm, graph.getCenterX(v), graph.getCenterY(v), v, true);
      return pm;
    }

    /**
     * Gets the pop-up menu for when the background is right-clicked but
     * some nodes are selected.
     */
    public JPopupMenu getSelectionPopup(double x, double y) {
      JPopupMenu pm = new JPopupMenu();
      populatePopup(pm, x, y, null, getGraph2D().selectedNodes().ok());
      return pm;
    }

    /**
     * Gets the edge pop-up menu.
     */
    public JPopupMenu getEdgePopup(final Edge e) {
        JPopupMenu pm = new JPopupMenu();
        addEdgeActions(pm, new EdgeList(e).edges());
        return pm;
      }

    /**
     * Adds the items to the edge pop-up menu.
     * 
     * @param pm	The pop-up menu.
     * @param sec	The associated edge cursor (selected edges when the pop-up is invoked).
     */
    private void addEdgeActions(JPopupMenu pm, EdgeCursor sec) {
        pm.add(new EdgeAction("Information", sec, this.parent, this.drawingService));
    }
    
	/**
	 * Populates the node pop-up menu.
	 * @param pm		The menu.
	 * @param x			The x location of the click.
	 * @param y			The y location of the click.
	 * @param node		The associated node (if any).
	 * @param selected	Whether a node is selected or not.
	 */
	protected void populatePopup(JPopupMenu pm, final double x, final double y, final Node node, boolean selected) {
          
		/* Create the selection menu items */
      	parent.add(selectItem = new JMenuItem("Select Neighbors (H)"));
        selectItem.addActionListener(this);
          
        parent.add(selectItemUp = new JMenuItem("Select SuperClasses (U)"));
        selectItemUp.addActionListener(this);
          
        parent.add(selectItemDown = new JMenuItem("Select Subclasses (B)"));
        selectItemDown.addActionListener(this);
          
        /* Create the hierarchy menu items */
        parent.add(addUp = new JMenuItem("Add Superclasses"));
        addUp.addActionListener(this);
          
        parent.add(addDown = new JMenuItem("Add Subclasses"));
        addDown.addActionListener(this);
        
        /* Create the delete menu item */
        parent.add(delItem = new JMenuItem("Delete selected (Del)"));
        delItem.addActionListener(this);
            
        
        if (node != null) {
        	/* The node is not null, so we add the information and change name items */
            parent.add(infoItem = new JMenuItem("Information"));
            infoItem.addActionListener(this);
            
            /* Populate the change name flyout menu */
        	namingMenu = new JMenu("Change Name");
        	GraphClass gClass = App.DataProvider.getClass(drawingService.getNodeName(node));
        	System.out.println(gClass.toString());
        	Iterator<GraphClass> classes = Algo.equNodes(gClass).iterator();

        	while (classes.hasNext()) {
        		
        		/* Store the service in a temp variable so we can use it in the action handler below */
        		final YFilesDrawingService tempService = this.drawingService;
        		
        		/* Add an action listener for each of the classes associated with the node. */
        		final GraphClass c = classes.next();
        		JMenuItem item = new JMenuItem(c.getNameAsHtml());        		
        		item.addActionListener(new AbstractAction() {
                    /** Keep the compiler happy ^^ */
					private static final long serialVersionUID = 1L;

					@Override
                    public void actionPerformed(ActionEvent e) {
						/* A new name was selected. Set the default class and redraw the label. */
                    	NodeView node = App.getViewManager(parent).findNode(c);
                    	node.setDefaultClass(c);
                    	tempService.updateLabel(node);
                    }
                });
            	namingMenu.add(item);
        	}
        	
        }
         
        /* Add the menu items and seperators */
        pm.add(selectItem);
        pm.add(selectItemUp);
        pm.add(selectItemDown);

        pm.addSeparator();
          
        pm.add(addUp);
        pm.add(addDown);
        pm.add(delItem);
         
        pm.addSeparator();
         
        pm.add(infoItem);
        if (node != null) {
        	pm.add(namingMenu);
        }
    }
  	

    /**
     * Event handler for menu selections
     */
    public void actionPerformed(ActionEvent event) {
        Object object = event.getSource();

        Object source = event.getSource();
        if (source == infoItem) {
        	/* Get the NodeView for the currently selected node */
        	Node node = getGraph2D().selectedNodes().node();
			NodeRealizer realizer = getGraph2D().getRealizer(node);
			NodeLabel label = realizer.getLabel();
        	NodeView nodeView = (NodeView)label.getUserData();
        	
        	/* Create and show the info dialog */
            JDialog d = new GraphClassInformationDialog(
                    this.parent, nodeView.getDefaultClass());

	        d.setLocation(50, 50);
	        d.pack();
	        d.setSize(800, 600);
	        d.setVisible(true);
            
        } else if (object == selectItem) {
        	drawingService.selectNeighbors();
        } else if (object == selectItemUp) {
        	drawingService.selectSuperClasses();
        } else if (object == selectItemDown) {
        	drawingService.selectSubClasses();
        } else if (object == addUp) {
        	
        	Collection<GraphClass> graphClasses = drawingService.getSelection();
        	graphClasses = App.DataProvider.getGraphClasses(graphClasses, true, false);
        	App.getViewManager(parent).add(graphClasses);
        	
        } else if (object == addDown) {
        	
        	Collection<GraphClass> graphClasses = drawingService.getSelection();
        	graphClasses = App.DataProvider.getGraphClasses(graphClasses, false, true);
        	App.getViewManager(parent).add(graphClasses);
        	
        } else if (object == delItem) {
        	
        	Collection<GraphClass> graphClasses = drawingService.getSelection();
        	App.getViewManager(parent).delete(graphClasses);
        	
        }
    }
}
