package teo.isgci.drawing;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JViewport;
import javax.swing.KeyStroke;

import teo.isgci.core.App;
import teo.isgci.core.EdgeView;
import teo.isgci.core.GraphView;
import teo.isgci.core.NodeView;
import teo.isgci.data.gc.GraphClass;
import teo.isgci.gui.AboutDialog;
import teo.isgci.gui.CheckInclusionDialog;
import teo.isgci.gui.ExportDialog;
import teo.isgci.gui.GraphClassInformationDialog;
import teo.isgci.gui.GraphClassSelectionDialog;
import teo.isgci.gui.ISGCIMainFrame;
import teo.isgci.gui.NamingDialog;
import teo.isgci.gui.OpenProblemDialog;
import teo.isgci.gui.PSGraphics;
import teo.isgci.gui.SearchDialog;
import teo.isgci.gui.ISGCIMainFrame.HierarchicPopupMode;
import y.base.DataMap;
import y.base.Edge;
import y.base.EdgeCursor;
import y.base.EdgeList;
import y.base.Node;
import y.base.NodeCursor;
import y.base.NodeList;
import y.geom.OrientedRectangle;
import y.io.IOHandler;
import y.layout.hierarchic.IncrementalHierarchicLayouter;
import y.layout.hierarchic.incremental.IncrementalHintsFactory;
import y.util.D;
import y.util.Maps;
import y.view.Arrow;
import y.view.AutoDragViewMode;
import y.view.BridgeCalculator;
import y.view.CreateEdgeMode;
import y.view.DefaultGraph2DRenderer;
import y.view.DefaultLabelConfiguration;
import y.view.EdgeLabel;
import y.view.EdgeRealizer;
import y.view.EditMode;
import y.view.GenericNodeRealizer;
import y.view.Graph2D;
import y.view.Graph2DLayoutExecutor;
import y.view.Graph2DView;
import y.view.Graph2DViewActions;
import y.view.Graph2DViewMouseWheelZoomListener;
import y.view.MovePortMode;
import y.view.NavigationComponent;
import y.view.NodeLabel;
import y.view.NodeRealizer;
import y.view.Overview;
import y.view.PopupMode;
import y.view.ShapeNodeRealizer;
import y.view.ShinyPlateNodePainter;
import y.view.SmartEdgeLabelModel;
import y.view.SmartNodeLabelModel;
import y.view.TooltipMode;
import y.view.ViewMode;
import y.view.YLabel;
import y.view.GenericNodeRealizer.Factory;
import y.view.hierarchy.HierarchyManager;
import yext.export.io.EPSOutputHandler;
import yext.svg.io.SVGIOHandler;

public class YFilesDrawingService implements IDrawingService {

	private Graph2DView graphView = null;
	private Graph2D graph2D = null;
    private IncrementalHierarchicLayouter layouter = null;
	private Map<NodeView, Node> currentNodes = null;
	private List<EdgeView> currentEdges = null;
	private ISGCIMainFrame mainFrame;
	
	private static final Color LABEL_LINE_COLOR = new Color(153, 204, 255, 255);
	private static final Color LABEL_BACKGROUND_COLOR = Color.WHITE;
	private static final String AUTO_FLIPPING_CONFIG = "AutoFlipConfig";
    public static final String NODE_CONFIGURATION = "myConf";

    
    static {
        registerDefaultNodeConfiguration(true);       
    }
    
	public YFilesDrawingService() {
		
		/* Create the graph view */
		this.graphView = new Graph2DView();
		this.graphView.setFitContentOnResize(true);
        registerViewModes();
        
        /* Zoom in/out at mouse pointer location */
        Graph2DViewMouseWheelZoomListener wheelZoomListener = new Graph2DViewMouseWheelZoomListener();
        wheelZoomListener.setCenterZooming(false);
        this.graphView.getCanvasComponent().addMouseWheelListener(wheelZoomListener);
        
		this.graph2D = graphView.getGraph2D();
        applyRealizerDefaults(this.graph2D, true, true);
		
		/* Create the layouter */
        layouter = new IncrementalHierarchicLayouter();
        layouter.setOrthogonallyRouted(true);
        layouter.setRecursiveGroupLayeringEnabled(false);
        
        /* Add the glass panel */
        addGlassPaneComponents();
        
        /* Create a hierarchy manager with the given graph */
        // new HierarchyManager(rootGraph) // createHierarchyManager(this.graph2D);
        // TINO

        /* Register the graph view with the DefaultGraph2DRenderer */
        BridgeCalculator bridgeCalculator = new BridgeCalculator();
        ((DefaultGraph2DRenderer)this.graphView.getGraph2DRenderer()).setBridgeCalculator(bridgeCalculator);
        
        this.graphView.fitContent();
        this.graphView.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
        .put(KeyStroke.getKeyStroke(KeyEvent.VK_H, 0), "select");
        
        this.graphView.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
        .put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), "delete");
        
        this.graphView.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
        .put(KeyStroke.getKeyStroke(KeyEvent.VK_U, 0), "selectUp");
        
        this.graphView.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
        .put(KeyStroke.getKeyStroke(KeyEvent.VK_B, 0), "selectDown");
        
        this.graphView.getRootPane().getActionMap().put("select", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectNeighbors();
            }
        });
        
        this.graphView.getRootPane().getActionMap().put("selectUp", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectSuperClasses();
            }
        });
        
        this.graphView.getRootPane().getActionMap().put("selectDown", new AbstractAction() {

			@Override
            public void actionPerformed(ActionEvent e) {
                selectSubClasses();
            }
        });
        
        this.graphView.getRootPane().getActionMap().put("delete", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	// TINO
                //deleteSelected();
            }
        });
	}

	@Override
	public JComponent getCanvas() {
		// TODO Auto-generated method stub
		return this.graphView;
	}

	@Override
	public void setParent(ISGCIMainFrame frame) {
		this.mainFrame = frame;
	}

	@Override
	public void initializeView(List<GraphView> graphs) {
		D.bug("entering initializeView");
		graph2D.clear();

		currentNodes = new HashMap<NodeView, Node>();
		currentEdges = new ArrayList<EdgeView>();
		Map<Node, List<Node>> nodeMap = new HashMap<Node, List<Node>>();
		  
		for (GraphView view : graphs) {
			List<NodeView> nodes = view.getNodes();
			List<EdgeView> edges = view.getEdges();
			D.bug("Before: " + nodes.size() + " nodes & " + edges.size() + " edges");

			NodeRealizer realizer = graph2D.getDefaultNodeRealizer().createCopy();
			for (EdgeView edge : edges) {
				NodeView from = edge.getFromNode();
				NodeView to = edge.getToNode();

				Node tempFrom;
				  if (currentNodes.containsKey(from)) {
					  tempFrom = currentNodes.get(from);
				  }
				  else {
					  realizer = graph2D.getDefaultNodeRealizer().createCopy();
					  realizer.setLabelText(from.getLabel());
					  realizer.setFillColor(from.getColor());
					  tempFrom = graph2D.createNode(realizer);
					  currentNodes.put(from, tempFrom);
				  }
				  Node tempTo;
				  if (currentNodes.containsKey(to)) {
					  tempTo = currentNodes.get(to);
				  }
				  else {
					  realizer = graph2D.getDefaultNodeRealizer().createCopy();
					  realizer.setLabelText(to.getLabel());
					  realizer.setFillColor(to.getColor());
					  tempTo = graph2D.createNode(realizer);
					  currentNodes.put(to, tempTo);
				  }
				  
				  if (nodeMap.containsKey(tempFrom)) {
					  nodeMap.get(tempFrom).add(tempTo);
				  }
				  else {
					  ArrayList<Node> toNodes = new ArrayList<Node>();
					  toNodes.add(tempTo);
					  nodeMap.put(tempFrom, toNodes);
				  }
				  currentEdges.add(edge);
			  }
			  
			  for (Node from : nodeMap.keySet()) {
				  D.bug("From " + from);			  
				  List<Node> toNodes = nodeMap.get(from);
				  for (Node to : toNodes) {
					  D.bug("\tTo " + to);
					  EdgeRealizer edgeRealizer = graph2D.getDefaultEdgeRealizer().createCopy();
					  edgeRealizer.setTargetArrow(Arrow.STANDARD);
					  graph2D.createEdge(from, to, edgeRealizer);
				  }
			  }			  
			  for (NodeView node : nodes) {
				  if (!currentNodes.containsKey(node)) {
					  realizer = graph2D.getDefaultNodeRealizer().createCopy();
					  realizer.setLabelText(node.getLabel());
					  realizer.setFillColor(node.getColor());
					  Node temp = graph2D.createNode(realizer);
					  currentNodes.put(node, temp);
					  D.bug("Adding ophaned node");
				  }
			  }	
			  D.bug("After: " + currentNodes.size() + " nodes & " + currentEdges.size() + " edges");		  
		  }
		  this.refreshView();
	}

	@Override
	public void updateView(List<GraphView> graphs) {

    	//Find the maximum width of all used Labels.
    	//Alternative: Skip the first run and set the current labelwidth for all node = different nodeswidths
    	double maxlen = 0;
    	for (NodeCursor nc = graph2D.nodes(); nc.ok(); nc.next())
	    {
    		Node n = nc.node();
    		ShapeNodeRealizer nr = (ShapeNodeRealizer)graph2D.getRealizer(n);
	        nr.setShapeType(ShapeNodeRealizer.ROUND_RECT);
	        
	        double len = nr.getLabel().getContentWidth();

	        if (len > maxlen) {
	        	maxlen = len;
	        	
	        }
	        
	    }
    	
        for (NodeCursor nc = graph2D.nodes(); nc.ok(); nc.next())
        {
          Node n = nc.node();
          
          ShapeNodeRealizer nr = (ShapeNodeRealizer)graph2D.getRealizer(n);
          nr.setShapeType(ShapeNodeRealizer.ROUND_RECT);
          
          nr.setSize(Math.max(maxlen/2, 30), 20);
          nr.getLabel().setFontSize(5);
          
          configureNodeLabel(nr.getLabel(), SmartNodeLabelModel.POSITION_CENTER);
          
          nr.repaint();
        }
        
        this.refreshView();
	}

	@Override
	public void updateColors(List<GraphView> graphs) {
		this.updateView(graphs);
	}
    
	@Override
	public void refreshView() {
        layouter.setLayoutMode(IncrementalHierarchicLayouter.LAYOUT_MODE_FROM_SCRATCH);
        final Graph2DLayoutExecutor layoutExecutor = new Graph2DLayoutExecutor();
        layoutExecutor.getLayoutMorpher().setSmoothViewTransform(true);
        layoutExecutor.doLayout(this.graphView, layouter);
        this.graphView.fitContent();
	}
    
	@Override
    public void exportGraphics(PSGraphics g) {
    	g.drawImage(this.graphView.getImage(), 0, 0, this.graphView);
    }


    /**
     * Export to Postscript.
     */
	@Override
    public void exportPS(String file) throws IOException {
        IOHandler ioh = new EPSOutputHandler();  
	    double tmpPDT = this.graphView.getPaintDetailThreshold();  
	    this.graphView.setPaintDetailThreshold(0.0);
	    ioh.write(this.graph2D, file);  
	    this.graphView.setPaintDetailThreshold(tmpPDT);
    }

    /**
     * Export to SVG.
     */
	@Override
    public void exportSVG(String file) throws IOException {
        IOHandler ioh = new SVGIOHandler();  
	    double tmpPDT = this.graphView.getPaintDetailThreshold();  
	    this.graphView.setPaintDetailThreshold(0.0);  
	    ioh.write(this.graph2D,file);  
	    this.graphView.setPaintDetailThreshold(tmpPDT);
    }

	@Override
    public void selectNeighbors() {
    	Graph2D g = this.graphView.getGraph2D();
    	NodeCursor n = g.selectedNodes();
    	ArrayList<Node> l = new ArrayList<Node>();
    	
    	for (int i = 0; i < n.size(); ++i) {
    		NodeCursor neigh =  n.node().neighbors(); 
    		for (int j = 0; j < neigh.size(); ++j) {
    			l.add(neigh.node());
    			neigh.next();
    		}
    		n.next();
    	}
    	for (Node no: l) {
    		this.graphView.getGraph2D().setSelected(no, true);
    	}
    	this.graphView.updateView();
    }

	@Override
    public void selectSuperClasses() {
    	Graph2D g = this.graphView.getGraph2D();
    	NodeCursor n = g.selectedNodes();
    	ArrayList<Node> l = new ArrayList<Node>();
    	
    	for (int i = 0; i < n.size(); ++i) {
    		NodeCursor neigh =  n.node().successors(); 
    		for (int j = 0; j < neigh.size(); ++j) {
    			l.add(neigh.node());
    			neigh.next();
    		}
    		n.next();
    	}
    	for (Node no: l) {
    		this.graphView.getGraph2D().setSelected(no, true);
    	}
    	this.graphView.updateView();
    }

	@Override
    public void selectSubClasses() {
    	Graph2D g = this.graphView.getGraph2D();
    	NodeCursor n = g.selectedNodes();
    	ArrayList<Node> l = new ArrayList<Node>();
    	
    	for (int i = 0; i < n.size(); ++i) {
    		NodeCursor neigh =  n.node().predecessors(); 
    		for (int j = 0; j < neigh.size(); ++j) {
    			l.add(neigh.node());
    			neigh.next();
    		}
    		n.next();
    	}
    	for (Node no: l) {
    		this.graphView.getGraph2D().setSelected(no, true);
    	}
    	this.graphView.updateView();
    }

	@Override
    public Collection<GraphClass> getSelection() {
	  	Graph2D g = this.graphView.getGraph2D();
	  	NodeCursor n = g.selectedNodes();
	  	Collection<GraphClass> graphClasses = new ArrayList<GraphClass>();
	  	for (int i = 0; i < n.size(); ++i) {
	  		String s = n.current().toString();
	  		if (s.contains("<sub>")) {
	      		if (s.substring(s.indexOf("<sub>"), s.indexOf("</sub>")).contains(",")) {
	      			s = s.replace("<sub>", "_{");
	          		s = s.replace("</sub>", "}");
	      		} else {
	      			s = s.replace("<sub>", "_");
	          		s = s.replace("</sub>", "");
	      		}
	  		}
	  		graphClasses.add(App.Current.DataProvider.getClass(s));
	  		n.next();
	  	}
	  	return graphClasses;
    }

	@Override
    public void search(NodeView view) {

        //parent.graphCanvas.markOnly(view);
        for (NodeCursor nc = this.graphView.getGraph2D().nodes(); nc.ok(); nc.next()) {
        	Node n = nc.node();
        	String s = n.toString();
        	
    		if (s.contains("<sub>")) {
        		if (s.substring(s.indexOf("<sub>"), s.indexOf("</sub>")).contains(",")) {
        			s = s.replace("<sub>", "_{");
            		s = s.replace("</sub>", "}");
        		} else {
        			s = s.replace("<sub>", "_");
            		s = s.replace("</sub>", "");
        		}
    		}
    		System.out.println(view.getLabel() + " " + s + " " + view.toString());
    		if (view.getLabel().equals(s)) {
    			System.out.println("JEP");
    			this.graphView.getGraph2D().setSelected(n, true);
    		}
    		this.graphView.repaint();
	    }
    }
    
//	@Override
//    public void editLabel() {
//		final EdgeRealizer r = this.graph2D.getRealizer(e);
//		final YLabel label = r.getLabel();
//
//		this.graphView.openLabelEditor(label,
//				label.getBox().getX(),
//				label.getBox().getY(),
//				null, true);
//	}

    
    
    

    
    private static void applyRealizerDefaults(Graph2D graph, boolean applyDefaultSize, boolean applyFillColor) {
	    for(NodeCursor nc = graph.nodes(); nc.ok(); nc.next()) {
	    	GenericNodeRealizer gnr = new GenericNodeRealizer(graph.getRealizer(nc.node()));
	    	gnr.setConfiguration(NODE_CONFIGURATION);
		  	if(applyFillColor) {
		    	gnr.setFillColor(graph.getDefaultNodeRealizer().getFillColor());
	  		}
		  	gnr.setLineColor(null);      
		  	if(applyDefaultSize) {
		  		gnr.setSize(graph.getDefaultNodeRealizer().getWidth(), graph.getDefaultNodeRealizer().getHeight());
		  	}
		  	NodeLabel label = gnr.getLabel();
		  	OrientedRectangle labelBounds = label.getOrientedBox();
		  	SmartNodeLabelModel model = new SmartNodeLabelModel();
	  		label.setLabelModel(model);
		  	label.setModelParameter(model.createModelParameter(labelBounds, gnr));
		  	graph.setRealizer(nc.node(), gnr);      
	    }        
    }

    public static void registerDefaultNodeConfiguration(boolean drawShadows) {
        Factory factory = GenericNodeRealizer.getFactory();
        Map configurationMap = factory.createDefaultConfigurationMap();

        ShinyPlateNodePainter painter = new ShinyPlateNodePainter();
        // ShinyPlateNodePainter has an option to draw a drop shadow that is more efficient
        // than wrapping it in a ShadowNodePainter.
        painter.setDrawShadow(drawShadows);

        configurationMap.put(GenericNodeRealizer.Painter.class, painter);
        configurationMap.put(GenericNodeRealizer.ContainsTest.class, painter);
        factory.addConfiguration(NODE_CONFIGURATION, configurationMap);
    }

    public void addGlassPaneComponents() {
        //get the glass pane
        JPanel glassPane = this.graphView.getGlassPane();
        //set an according layout manager
        glassPane.setLayout(new BorderLayout());

        JPanel toolsPanel = new JPanel(new GridBagLayout());
        toolsPanel.setOpaque(false);
        toolsPanel.setBackground(null);
        toolsPanel.setBorder(BorderFactory.createEmptyBorder(16, 16, 0, 0));

        //create and add the overview to the tools panel
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.anchor = GridBagConstraints.LINE_START;
        gbc.insets = new Insets(0, 0, 16, 0);
        JComponent overview = createOverview(this.graphView);
        toolsPanel.add(overview, gbc);

        //create and add the navigation component to the tools panel
        NavigationComponent navigationComponent = createNavigationComponent(this.graphView, 20, 30);
        toolsPanel.add(navigationComponent, gbc);

        //add the toolspanel to the glass pane
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        gbc.weighty = 1;
        gbc.anchor = GridBagConstraints.FIRST_LINE_START;
        JViewport viewport = new JViewport();
        viewport.add(toolsPanel);
        viewport.setOpaque(false);
        viewport.setBackground(null);
        JPanel westPanel = new JPanel(new BorderLayout());
        westPanel.setOpaque(false);
    	westPanel.setBackground(null);
    	westPanel.add(viewport, BorderLayout.NORTH);
    	glassPane.add(westPanel, BorderLayout.WEST);
  	}
    

    private NavigationComponent createNavigationComponent(Graph2DView view, double scrollStepSize, int scrollTimerDelay) {
        //create the NavigationComponent itself
        final NavigationComponent navigation = new NavigationComponent(view);
        navigation.setScrollStepSize(scrollStepSize);
        //set the duration between scroll ticks
        navigation.putClientProperty("NavigationComponent.ScrollTimerDelay", new Integer(scrollTimerDelay));
        //set the initial duration until the first scroll tick is triggered
        navigation.putClientProperty("NavigationComponent.ScrollTimerInitialDelay", new Integer(scrollTimerDelay));
        //set a flag so that the fit content button will adjust the viewports in an animated fashion
        navigation.putClientProperty("NavigationComponent.AnimateFitContent", Boolean.TRUE);

        //add a mouse listener that will make a semi transparent background, as soon as the mouse enters this component
        navigation.setBackground(new Color(255, 255, 255, 0));
        MouseAdapter navigationToolListener = new MouseAdapter() {
          public void mouseEntered(MouseEvent e) {
            super.mouseEntered(e);
            Color background = navigation.getBackground();
            //add some semi transparent background
            navigation.setBackground(new Color(background.getRed(), background.getGreen(), background.getBlue(), 196));
          }

          public void mouseExited(MouseEvent e) {
            super.mouseExited(e);
            Color background = navigation.getBackground();
            //make the background completely transparent
            navigation.setBackground(new Color(background.getRed(), background.getGreen(), background.getBlue(), 0));
          }
        };
        navigation.addMouseListener(navigationToolListener);

        //add mouse listener to all sub components of the navigationComponent
        for (int i = 0; i < navigation.getComponents().length; i++) {
          Component component = navigation.getComponents()[i];
          component.addMouseListener(navigationToolListener);
        }

        return navigation;
    }  
    
    protected void registerViewModes() {
    	
    	EditMode editMode = createEditMode();
        editMode.allowNodeCreation(false);
        editMode.allowEdgeCreation(false);
        editMode.allowNodeEditing(false);
 
        
        if (editMode != null) {
        	this.graphView.addViewMode(editMode);
        }
    	
    	
        this.graphView.addViewMode(new AutoDragViewMode()); 

        TooltipMode tooltipMode = createTooltipMode();
        if(tooltipMode != null) {
        	this.graphView.addViewMode(tooltipMode);
        }

        //view.addViewMode(new AutoDragViewMode());
        /*
        editMode.setPopupMode(new PopupMode() {
            public JPopupMenu getEdgePopup(Edge e) {
              JPopupMenu pm = new JPopupMenu();
              pm.add(new EditLabel(e, par));
              return pm;
            }
          });*/
    }

    
    private Overview createOverview(Graph2DView view) {
        Overview ov = new Overview(view);
        //animates the scrolling
        ov.putClientProperty("Overview.AnimateScrollTo", Boolean.TRUE);
        //blurs the part of the graph which can currently not be seen
        ov.putClientProperty("Overview.PaintStyle", "Funky");
        //allows zooming from within the overview
        ov.putClientProperty("Overview.AllowZooming", Boolean.TRUE);
        //provides functionality for navigation via keybord (zoom in (+), zoom out (-), navigation with arrow keys)
        ov.putClientProperty("Overview.AllowKeyboardNavigation", Boolean.TRUE);
        //determines how to differ between the part of the graph that can currently be seen, and the rest
        ov.putClientProperty("Overview.Inverse", Boolean.TRUE);
        ov.setPreferredSize(new Dimension(150, 150));
        ov.setMinimumSize(new Dimension(150, 150));

        ov.setBorder(BorderFactory.createEtchedBorder());
        return ov;
    }
    
    protected EditMode createEditMode() {
		EditMode editMode = new EditMode();
		// show the highlighting which is turned off by default
    	if (editMode.getCreateEdgeMode() instanceof CreateEdgeMode) {
    		((CreateEdgeMode) editMode.getCreateEdgeMode()).setIndicatingTargetNode(true);
    	}
    	if (editMode.getMovePortMode() instanceof MovePortMode) {
    		((MovePortMode) editMode.getMovePortMode()).setIndicatingTargetNode(true);
    	}

    	//allow moving view port with right drag gesture
    	editMode.allowMovingWithPopup(true);
    	editMode.allowLabelSelection(true);
    
    	//add hierarchy actions to the views popup menu
    	editMode.setPopupMode(new HierarchicPopupMode());
    
    	editMode.getMouseInputMode().setNodeSearchingEnabled(true);
    	editMode.getMouseInputMode().setEdgeSearchingEnabled(true);
    
    
    	//Add a visual indicator for the target node of an edge creation - makes it easier to
    	//see the target for nested graphs
    	ViewMode createEdgeMode = editMode.getCreateEdgeMode();
    	if (createEdgeMode instanceof CreateEdgeMode) {
    		((CreateEdgeMode) createEdgeMode).setIndicatingTargetNode(true);
    	}
    	return editMode;
    }
    
    protected void configureDefaultRealizers() {  

        NodeRealizer nodeRealizer = this.graph2D.getDefaultNodeRealizer();
        nodeRealizer.setSize(200, 100);
        final NodeLabel nodeLabel = nodeRealizer.getLabel();
        nodeLabel.setText("Smart Node Label");
        nodeLabel.setLineColor(LABEL_LINE_COLOR);
        nodeLabel.setBackgroundColor(LABEL_BACKGROUND_COLOR);
        final SmartNodeLabelModel nodeLabelModel = new SmartNodeLabelModel();
        nodeLabel.setLabelModel(nodeLabelModel);
        nodeLabel.setModelParameter(nodeLabelModel.getDefaultParameter());

        final YLabel.Factory factory = EdgeLabel.getFactory();
        final Map defaultConfigImplementationsMap = factory.createDefaultConfigurationMap();
        DefaultLabelConfiguration customLabelConfig = new DefaultLabelConfiguration();
        customLabelConfig.setAutoFlippingEnabled(true);
        defaultConfigImplementationsMap.put(YLabel.Painter.class, customLabelConfig);
        defaultConfigImplementationsMap.put(YLabel.Layout.class, customLabelConfig);
        defaultConfigImplementationsMap.put(YLabel.BoundsProvider.class, customLabelConfig);
        factory.addConfiguration(AUTO_FLIPPING_CONFIG, defaultConfigImplementationsMap);

        EdgeRealizer edgeRealizer = this.graph2D.getDefaultEdgeRealizer();
        final EdgeLabel edgeLabel = edgeRealizer.getLabel();
        edgeLabel.setText("Smart Edge Label");
        edgeLabel.setLineColor(LABEL_LINE_COLOR);
        edgeLabel.setBackgroundColor(LABEL_BACKGROUND_COLOR);
        final SmartEdgeLabelModel edgeLabelModel = new SmartEdgeLabelModel();
        edgeLabel.setLabelModel(edgeLabelModel);
        edgeLabel.setModelParameter(edgeLabelModel.createDiscreteModelParameter(SmartEdgeLabelModel.POSITION_CENTER));
        edgeLabel.setConfiguration(AUTO_FLIPPING_CONFIG);
    }
    
    
    private void configureNodeLabel(NodeLabel label, int position) {
        SmartNodeLabelModel model = new SmartNodeLabelModel();
        label.setLabelModel(model);
        label.setModelParameter(model.createDiscreteModelParameter(position));
    }
    
    protected TooltipMode createTooltipMode() {
        TooltipMode tooltipMode = new TooltipMode();
        tooltipMode.setEdgeTipEnabled(true);
       
        return tooltipMode;
    }
     
    public void layoutIncrementally() {
        Graph2D graph = this.graphView.getGraph2D();

        layouter.setLayoutMode(IncrementalHierarchicLayouter.LAYOUT_MODE_INCREMENTAL);

        // create storage for both nodes and edges
        DataMap incrementalElements = Maps.createHashedDataMap();
        // configure the mode
        final IncrementalHintsFactory ihf = layouter.createIncrementalHintsFactory();

        for (NodeCursor nc = graph.selectedNodes(); nc.ok(); nc.next()) {
        	incrementalElements.set(nc.node(), ihf.createLayerIncrementallyHint(nc.node()));
        }

        for (EdgeCursor ec = graph.selectedEdges(); ec.ok(); ec.next()) {
          	incrementalElements.set(ec.edge(), ihf.createSequenceIncrementallyHint(ec.edge()));
        }
        graph.addDataProvider(IncrementalHierarchicLayouter.INCREMENTAL_HINTS_DPKEY, incrementalElements);
        try {
        	final Graph2DLayoutExecutor layoutExecutor = new Graph2DLayoutExecutor();
        	layoutExecutor.getLayoutMorpher().setSmoothViewTransform(true);
        	layoutExecutor.doLayout(this.graphView, layouter);
        } finally {
        	graph.removeDataProvider(IncrementalHierarchicLayouter.INCREMENTAL_HINTS_DPKEY);
        }
    }
    

//    private void deleteSelected() {
//    	Graph2D g = view.getGraph2D();
//    	NodeCursor n = g.selectedNodes();
//    	ArrayList<Node> l = new ArrayList<Node>();
//    	Collection<GraphClass> gCol = new ArrayList<GraphClass>();
//    	for (int i = 0; i < n.size(); ++i) {
//    		String s = n.current().toString();
//    		if (s.contains("<sub>")) {
//        		if (s.substring(s.indexOf("<sub>"), s.indexOf("</sub>")).contains(",")) {
//        			s = s.replace("<sub>", "_{");
//            		s = s.replace("</sub>", "}");
//        		} else {
//        			s = s.replace("<sub>", "_");
//            		s = s.replace("</sub>", "");
//        		}
//    		}
//    		gCol.add(DataProvider.getClass(s));
//    		n.next();
//    	}
//    	this.viewManager.del(App.Current.DataProvider.getNodes(gCol, false, false));
//    	
//    	view.updateView();
//    }

//    
//    public void addSubClasses() {
//    	Graph2D g = this.graphView.getGraph2D();
//    	NodeCursor n = g.selectedNodes();
//    	ArrayList<Node> l = new ArrayList<Node>();
//    	Collection<GraphClass> gCol = new ArrayList<GraphClass>();
//    	for (int i = 0; i < n.size(); ++i) {
//    		Node neigh =  n.node(); 
//    		String s = n.current().toString();
//    		if (s.contains("<sub>")) {
//        		if (s.substring(s.indexOf("<sub>"), s.indexOf("</sub>")).contains(",")) {
//        			s = s.replace("<sub>", "_{");
//            		s = s.replace("</sub>", "}");
//        		} else {
//        			s = s.replace("<sub>", "_");
//            		s = s.replace("</sub>", "");
//        		}
//    		}
//    		gCol.add(DataProvider.getClass(s));
//    		n.next();
//    	}
//    	this.viewManager.add(App.Current.DataProvider.getNodes(gCol, false, true));
//    	
//    	this.graphView.updateView();
//    }
//    
	class OpenFoldersAndLayoutAction  extends Graph2DViewActions.OpenFoldersAction {
	
	    OpenFoldersAndLayoutAction() {
	      super(YFilesDrawingService.this.graphView);
	    }
	
	    public void openFolder(Node folderNode, Graph2D graph) {
	      NodeList children = new NodeList(graph.getHierarchyManager().getInnerGraph(folderNode).nodes());
	      super.openFolder(folderNode, graph);
	      graph.unselectAll();
	      graph.setSelected(folderNode, true);
	      for (NodeCursor nc = children.nodes(); nc.ok(); nc.next()) {
	        graph.setSelected(nc.node(), true);
	      }
	
	      YFilesDrawingService.this.layoutIncrementally();
	
	      graph.unselectAll();
	      graph.setSelected(folderNode, true);
	      graph.updateViews();
	     
	    }
	}
	/**
	   * Collapse a group node. After collapsing the group node, an incremental layout is automatically triggered.
	   * For this, the collapsed node is treated as an incremental element.
	   */
	class CloseGroupsAndLayoutAction extends Graph2DViewActions.CloseGroupsAction {

	    CloseGroupsAndLayoutAction() {
	    	super(YFilesDrawingService.this.graphView);
	    }

	    public void closeGroup(Node groupNode, Graph2D graph) {
	    	super.closeGroup(groupNode, graph);
	      	graph.unselectAll();
	      	graph.setSelected(groupNode, true);
	      	for (EdgeCursor ec = groupNode.edges(); ec.ok(); ec.next()) {
	    	  	graph.setSelected(ec.edge(), true);
	      	}

	      	YFilesDrawingService.this.layoutIncrementally();
	      	graph.unselectAll();

	      	graph.updateViews();     
	    }
	}
	
}
