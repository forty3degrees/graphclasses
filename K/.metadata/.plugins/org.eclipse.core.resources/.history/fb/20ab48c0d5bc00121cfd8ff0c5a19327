package teo.isgci.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JToolBar;

import teo.Actions.AssignLengthsAction;
import teo.Actions.OptionAction;
import y.layout.hierarchic.IncrementalHierarchicLayouter;

public class ISGCIToolBar {
	ISGCIMainFrame parent;
	public ISGCIToolBar(ISGCIMainFrame p) {
		parent = p;
	}
	
	public static JComponent createActionControl(final Action action, final boolean showActionText) {
        final JButton jb = new JButton();
        if (action.getValue(Action.SMALL_ICON) != null) {
          jb.putClientProperty("hideActionText", Boolean.valueOf(!showActionText));
        }
        jb.setAction(action);
        return jb;
      }
	
	public static JComponent createActionControl(final Action action) {
        return createActionControl(action, true);
      }
	
	public JToolBar createToolBar() {
    	JToolBar toolBar = new JToolBar();
        
        addLayoutActions(toolBar);    
        
        toolBar.addSeparator();
        toolBar.add(createActionControl(parent.lA));
        toolBar.add(createActionControl(new OptionAction(parent)));
        toolBar.addSeparator();
        toolBar.add(new AssignLengthsAction(parent));
        toolBar.addSeparator();
        JCheckBoxMenuItem chk = new JCheckBoxMenuItem();
        chk.setText("Animation");
        chk.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent a) {
        		parent.check = !parent.check;
        		
        	}        	
        });
        chk.setVisible(true);
        
        JCheckBoxMenuItem style = new JCheckBoxMenuItem();
        style.setText("old Canvas");
        style.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent a) {
        		parent.oldStyle = !parent.oldStyle;
        		if (parent.oldStyle) {
        			parent.mainPan.remove(parent.view);
        			parent.mainPan.add(parent.drawingPane);
        		} else {
        			parent.mainPan.remove(parent.drawingPane);
        			parent.mainPan.add(parent.view);
        		}
        		parent.mainPan.updateUI();
        		
        	}        	
        });
        style.setVisible(true);
        
        toolBar.add(chk);
        toolBar.add(style);

        
        return toolBar;
      }
	
	protected void addLayoutActions(JToolBar toolBar) {
        final Action incrementalLayoutAction = new AbstractAction(
                "Incremental") {
          public void actionPerformed(ActionEvent e) {
        	  parent.layoutIncrementally();
          }
        };

        final Action layoutAction = new AbstractAction(
                "Complete") {
          public void actionPerformed(ActionEvent e) {
        	  parent.dolayout();
          }
        };

        final Action propertiesAction = new AbstractAction(
                "Settings...", getIconResource("resource/Properties.png")) {
          public void actionPerformed(ActionEvent e) {
            final ActionListener layoutListener = new ActionListener() {
              public void actionPerformed(ActionEvent e) {
            	  parent.dolayout();
              }
            };
            OptionSupport.showDialog(parent.groupLayoutOptions, layoutListener, false, parent.view.getFrame());
            configureGroupLayout();
          }
        };

        toolBar.addSeparator();
        toolBar.add(new JLabel("Layout: "));
        toolBar.add(createActionControl(incrementalLayoutAction));
        toolBar.add(createActionControl(layoutAction));
        toolBar.add(createActionControl(propertiesAction));
      }
	
	public static Icon getIconResource( final String resource ) {
        try {
          final URL icon = ISGCIMainFrame.class.getResource(resource);
          if (icon == null) {
            return null;
          } else {
            return new ImageIcon(icon);
          }
        } catch (Exception e) {
        	System.out.println( e.getMessage());
          return null;
        }
      }
	
	void configureGroupLayout() {
        Object gsi = parent.groupLayoutOptions.get("Group Layering Strategy");
        if ("Recursive Layering".equals(gsi)) {
          parent.layouter.setRecursiveGroupLayeringEnabled(true);
        } else if ("Global Layering".equals(gsi)) {
        	parent.layouter.setRecursiveGroupLayeringEnabled(false);
        }

        parent.layouter.setGroupCompactionEnabled(parent.groupLayoutOptions.getBool("Enable Compact Layering"));

        Object gai = parent.groupLayoutOptions.get("Group Alignment");
        if ("Top".equals(gai)) {
        	parent.layouter.setGroupAlignmentPolicy(IncrementalHierarchicLayouter.POLICY_ALIGN_GROUPS_TOP);
        } else if ("Center".equals(gai)) {
        	parent.layouter.setGroupAlignmentPolicy(IncrementalHierarchicLayouter.POLICY_ALIGN_GROUPS_CENTER);
        }
        if ("Bottom".equals(gai)) {
        	parent.layouter.setGroupAlignmentPolicy(IncrementalHierarchicLayouter.POLICY_ALIGN_GROUPS_BOTTOM);
        }
      }
}
