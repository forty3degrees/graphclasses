package teo.isgci.data;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.Vector;

import org.jgrapht.graph.SimpleDirectedGraph;

import teo.isgci.core.IDataProvider;
import teo.isgci.data.db.AbstractRelation;
import teo.isgci.data.gc.GraphClass;
import teo.isgci.data.grapht.BFSWalker;
import teo.isgci.data.grapht.GraphWalker;
import teo.isgci.data.grapht.Inclusion;
import teo.isgci.data.grapht.RevBFSWalker;
import teo.isgci.data.problem.Complexity;
import teo.isgci.data.problem.Problem;

public abstract class DataProvider implements IDataProvider {

	protected boolean initialized;
    
    protected String date;
	protected int nodeCount;
	protected int edgeCount;
	

    /** The inclusion graph */
	protected SimpleDirectedGraph<GraphClass,Inclusion> inclGraph;
	
    /** Maps class names to nodes */
    protected TreeMap<String,GraphClass> names;
    
    /** Maps graph classes to their SCCs */
    protected Map<GraphClass, Set<GraphClass> > sccs;

    /** Problems */
    public Vector<Problem> problems;

    /** Relations not in inclGraph */
    public List<AbstractRelation> relations;
    
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#loadData(java.lang.String)
	 */
	@Override
	public abstract void loadData(String data) throws Exception;

	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#findRelation(teo.isgci.data.gc.GraphClass, teo.isgci.data.gc.GraphClass)
	 */
	@Override
	public AbstractRelation findRelation(GraphClass x, GraphClass y) throws UnsupportedOperationException {
		throw new UnsupportedOperationException("Method not implemented");
	}
	
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getRelations()
	 */
	@Override
	public Collection<AbstractRelation> getRelations() {
		return Collections.unmodifiableCollection(this.relations);
	}
	
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getGraphClasses()
	 */
	@Override
	public Collection<GraphClass> getGraphClasses() {
		return Collections.unmodifiableCollection(this.names.values());
	}   
    
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getGraphClasses(java.util.Collection, boolean, boolean)
	 */
	@Override
    public Collection<GraphClass> getGraphClasses(Collection<GraphClass> graphs, 
    		boolean doSuper, boolean doSub) {
        final HashSet<GraphClass> result = new HashSet<GraphClass>();
       
        for (GraphClass graph : graphs) {
            result.add(graph);
            if (doSuper) {
                result.addAll(this.getSuperClasses(graph, true));
            }
            if (doSub) {
                result.addAll(this.getSubClasses(graph, true));
            }
        }

        return result;
    }  

	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getGraphClasses(teo.isgci.data.gc.GraphClass, teo.isgci.data.problem.Problem)
	 */
	@Override
    public Collection<GraphClass> getGraphClasses(GraphClass graph, Problem problem) {
        Complexity c = problem.getComplexity(graph);
        Collection<GraphClass> result = null;
        if (c.isUnknown())
            result = getGraphClassesOpen(graph, problem);
        else if (c.betterOrEqual(Complexity.P))
            result = getGraphClassesP(graph, problem);
        else if (c.likelyNotP())
            result = getGraphClassesNP(graph, problem);
        else
            throw new RuntimeException("Bad node");
        return result;
    }

	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getClass(java.lang.String)
	 */
	@Override
    public GraphClass getClass(String name) {
        return this.names.get(name);
    }

	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getInclusionGraph()
	 */
	@Override
    public SimpleDirectedGraph<GraphClass,Inclusion> getInclusionGraph() {
        return this.inclGraph;
    }

	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getEquivalentClasses(teo.isgci.data.gc.GraphClass)
	 */
	@Override
    public Set<GraphClass> getEquivalentClasses(GraphClass graph) {
        return this.sccs.get(graph);
    }
	
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getProblems()
	 */
	@Override
	public Problem[] getProblems() {
		
		/* Return a copy */
		Problem[] temp = new Problem[this.problems.size()];
		return this.problems.toArray(temp);
	}
	
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getProblem(java.lang.String)
	 */
	@Override
	public Problem getProblem(String name) {
		for (int i = 0; i < problems.size(); i++)
            if (name.equals( ((Problem) problems.elementAt(i)).getName() )) {
                return (Problem) problems.elementAt(i);
            }
        return null;
	}

	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getSubClasses(teo.isgci.data.gc.GraphClass, java.lang.Boolean)
	 */
	@Override
	public Collection<GraphClass> getSubClasses(GraphClass graph, final Boolean recursive) {

		final HashSet<GraphClass> result = new HashSet<GraphClass>();
		
		result.add(graph);
		new BFSWalker<GraphClass,Inclusion>( this.inclGraph,
                graph, null, GraphWalker.InitCode.DYNAMIC) {
            public void visit(GraphClass v) {
                result.add(v);
                if (recursive)
                {
                	super.visit(v);
                }
            }
        }.run();
        
        return result;
	}
	
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getSuperClasses(teo.isgci.data.gc.GraphClass, java.lang.Boolean)
	 */
	@Override
	public Collection<GraphClass> getSuperClasses(GraphClass graph, final Boolean recursive) {

		final HashSet<GraphClass> result = new HashSet<GraphClass>();
		
		result.add(graph);
		new RevBFSWalker<GraphClass,Inclusion>( this.inclGraph,
                graph, null, GraphWalker.InitCode.DYNAMIC) {
            public void visit(GraphClass v) {
                result.add(v);
                if (recursive)
                {
                	super.visit(v);
                }
            }
        }.run();
        
        return result;
	}
	
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getComplexityMap(teo.isgci.data.gc.GraphClass)
	 */
	@Override
	public Map<Problem, Complexity> getComplexityMap(GraphClass graph) {
		throw new UnsupportedOperationException("Method not implemented");
	}
	
	/* (non-Javadoc)
	 * @see teo.isgci.core.IDataProvider#getComplexityMap(teo.isgci.data.problem.Problem)
	 */
	@Override
	public Map<GraphClass, Complexity> getComplexityMap(Problem problem) {
		throw new UnsupportedOperationException("Method not implemented");
	}
	
	/**
	* {@inheritDoc}
    */
	@Override
    public String getDate() {
        return date;
    }        
	
	/**
	* {@inheritDoc}
    */
	@Override
    public int getNodeCount() {
        return nodeCount;
    }    
	
	/**
	* {@inheritDoc}
    */
	@Override
    public int getEdgeCount() {
        return edgeCount;
    } 
    
    /**
     * Return a collection with the environment of the given node.
     * The environment is found by walking over open super/subclasses until the
     * first non-open node is reached.
     * @param node					name of a GraphClass
     * @param problem				name of a problem
     * @return						returns a Collection of GraphClasses
     */
	private Collection<GraphClass> getGraphClassesOpen(GraphClass node,
            final Problem problem) {
        /*final ArrayList<GraphClass> result = new ArrayList<GraphClass>();
        new UBFSWalker<GraphClass,Inclusion>(
                DataSet.inclGraph, node, null, GraphWalker.InitCode.DYNAMIC) {
            public void visit(GraphClass v) {
                result.add(v);
                Complexity c = problem.getComplexity(v);
                if (c.isUnknown())
                    super.visit(v);
                else
                    finish(v);
            }
        }.run();*/

        ArrayList<GraphClass> result = new ArrayList<GraphClass>();
        result.addAll(getGraphClassesNP(node, problem));
        result.addAll(getGraphClassesP(node, problem));

        return result;
    }


    /**
     * Return a collection with the environment of the given node.
     * The environment is found by walking over open subclasses until the
     * first polynomial node is reached.
     * @param node					name of a GraphClass
     * @param problem				name of a problem
     * @return 						returns a Collection of GraphClasses
     */
    private Collection<GraphClass> getGraphClassesNP(GraphClass node,
            final Problem problem) {
        final ArrayList<GraphClass> result = new ArrayList<GraphClass>();
        new BFSWalker<GraphClass,Inclusion>(
                this.inclGraph, node, null, GraphWalker.InitCode.DYNAMIC) {
            public void visit(GraphClass v) {
                result.add(v);
                if (problem.getComplexity(v).betterOrEqual(Complexity.P))
                    finish(v);
                else
                    super.visit(v);
            }
        }.run();

        return result;
    }


    /**
     * Fills in a vector with the environment of the given node.
     * The environment is found by walking over open superclasses until the
     * first non-polynomial node is reached.
     * @param node					name of a GraphClass
     * @param problem				name of a Problem
     * @return						returns a Collection of GraphClasses
     */
    private Collection<GraphClass> getGraphClassesP(GraphClass node,
            final Problem problem) {
        final ArrayList<GraphClass> result = new ArrayList<GraphClass>();
        new RevBFSWalker<GraphClass,Inclusion>(
                this.inclGraph, node, null, GraphWalker.InitCode.DYNAMIC) {
            public void visit(GraphClass v) {
                result.add(v);
                Complexity c = problem.getComplexity(v);
                if (c.likelyNotP())
                    finish(v);
                else
                    super.visit(v);
            }
        }.run();

        return result;
    }

}
